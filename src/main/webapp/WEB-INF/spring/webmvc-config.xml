<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:mvc="http://www.springframework.org/schema/mvc"
xmlns:p="http://www.springframework.org/schema/p"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:sec="http://www.springframework.org/schema/security"
xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.0.xsd">

	<!-- The controllers are autodetected POJOs labeled with the @Controller annotation. -->
	<context:component-scan base-package="com.altostratus.bionicwheels" use-default-filters="false">
		<context:include-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
	</context:component-scan>

	<!-- Allows for mapping the DispatcherServlet to "/" by forwarding static resource requests to the container's default Servlet -->
	<mvc:default-servlet-handler/>

	<!-- register "global" interceptor beans to apply to all registered HandlerMappings -->
	<mvc:interceptors>
		<!-- http://www.paulcodding.com/blog/2008/01/21/using-the-opensessioninviewinterceptor-for-spring-hibernate3/ -->
	    <bean id="openSessionInViewInterceptor"
		    class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor">
		    <property name="entityManagerFactory" ref="entityManagerFactory"></property>
		</bean>
	</mvc:interceptors>

	<!-- selects a static view for rendering without the need for an explicit controller -->
	<mvc:view-controller path="/login" view-name="login"/>
	<mvc:view-controller path="/uncaughtException" view-name="uncaughtException"/>
	<mvc:view-controller path="/resourceNotFound" view-name="resourceNotFound"/>
	<mvc:view-controller path="/dataAccessFailure" view-name="dataAccessFailure"/>

	<!-- Turns on support for mapping requests to Spring MVC @Controller methods
     	Also registers default Formatters and Validators for use across all @Controllers -->
    <mvc:annotation-driven/>

    <!-- Turns on Security annotations -->
    <sec:global-method-security pre-post-annotations="enabled"/>

	<!-- This bean resolves specific types of exceptions to corresponding logical - view names for error views.
	     The default behaviour of DispatcherServlet - is to propagate all exceptions to the servlet container:
	     this will happen - here with all other types of exceptions. -->

	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" p:defaultErrorView="uncaughtException">
		<property name="exceptionMappings">
			<props>
				<prop key=".DataAccessException">dataAccessFailure</prop>
				<prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
				<prop key=".TypeMismatchException">resourceNotFound</prop>
				<prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
			</props>
		</property>
	</bean>

	<!-- allows for integration of file upload functionality -->
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver"/>

	<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" id="tilesViewResolver">
    	<property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
  	</bean>

<!-- 	<bean id="messageSource"    -->
<!--     class="org.springframework.context.support.ResourceBundleMessageSource">   -->
<!--     <property name="basenames">   -->
<!--         <list> -->
<!--             <value>META-INF\spring\messages</value> -->
<!--         </list> -->
<!--     </property> -->
<!-- 	</bean> -->
	
    <bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer" id="tilesConfigurer">
    <property name="definitions">
      <list>
        <value>/WEB-INF/layouts/layouts.xml</value>
        <!-- Scan views directory for Tiles configurations -->
        <value>/WEB-INF/views/**/views.xml</value>
      </list>
    </property>
  </bean>
  
</beans>